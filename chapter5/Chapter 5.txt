5.0 Interlude: Process API
- UNIX way of process creation: fork() and exec(), wait() can be used by a process waiting for a process it created to complete
5.1 The fork() System Call
- Process identifier (PID) is used to name a process
- fork() creates an (almost) exacty copy of the parent process
- The child does not start at main(), but as it has called fork() itself.
- int rc = fork(): rc < 0: fork failed, rc == 0: child process, else: parent process.
- CPU scheduler determines whether to run parent or child, it is not determinstic.
5.2 The wait() System Call
- int rc_wait = wait(NULL) returns the PID of the child process and waits for it to finish. It can therefore make the program determinstic.
5.3 The exec() System Call
- exec() is used to run a different program from the calling program, other than fork().
- execvp() can be used to run a diffent program:
	char *myargs[3];
	myargs[0] = strdup("wc");
	myargs[1] = strdup("p3.c");
	myargs[2] = NULL;
	execvp(myargs[0], myargs);
	printf("this should never be printed\n");
- exec() loads the code and static data from the executable and overwrites its current code segment and static data with it. Heap and stack are re-initialized. No new process is created, but the current is transformed. A successful call to exec() never returns.
5.4 Why? Motivating The API
- Separation of fork() and exec() is essential for the UNIX shell: It lets the shell run code after fork() but before exec()
- When a command is prompted, the shell created a child process with fork(), runs the command with exec() and then waits for the command (or the child process) to complete using wait()
- wc oldfile.txt > newfile.txt: Before calling exec(), the shell opens a file descriptor to newfile.txt and closes standard output. This works thanks to file descriptors being kept open during exec().
- UNIX systems look for free file descriptors. STDOUT_FILENO is the first available and therefore assigned when open() is called.
- UNIX pipes are implemented using pipe(): The output of one process is conntected to an in-kernel pipe (a queue) and the input to of another process is connected to the same pipe.
5.5 Process Control and Users
- kill() is used to send signals to a process, including imperatives to pause and die.
- Ctrl-C sends a SIGINT (interrupt) signal to the process, normally terminating it.
- Ctrl-Z sends a SIGTSTP (stop) signal to the process, pausing it. It can be resumed later, for example using the fg command.
- Signals can be sent to single processes and entire process groups.
- signal() can be used to catch signals, to run a particular piece of code.
- The concept of users ensures they can generally only control their own process, making the system usable and secure.
- It is the job of the OS to parcel out resources to meet overall system goals.
5.6 Useful Tools
- man pages
- ps: See which process are running
- top: Displays processes and their resource usage
- A system needs a administer who can kill abritrary processes and run powerful commands (superuser/root on UNIX)
- To increase security, it is better to be a regular user
- kill (by PID), killall (by name): Kill processes
5.7 Summary
- Recent papers by systems researchers (Microsoft, Boston University, ETH in Switzerland) detail proplems with fork() and advocate for simpler process creation such as spawn()

Homework
./fork.py -s 10
1.
Action: a forks b
a
|-b
Action: a forks c
a
|-b
|-c
Action: c EXITS
a
|-b
Action: a forks d
a
|-b
|-d
Action: a forks e
a
|-b
|-d
|-e
./fork.py -a 5 -s 2
Action: a forks b
a
|-b
Action: b EXITS
a
Action: a forks c
a
|-c
Action: c forks d
a
|-c
  |-d
Action: a forks e
a
|-c
| |-d
|
|-e

2.
As the percentage gets higher, the final process tree will likely have more branches.

3.
./fork.py -t
a
|-b
Action: a forks b
a
|-b
|-c
Action: a forks c
a
|-b
|-c
  |-d
Action: c forks d
a
|-b
|-d
Action: c EXITS
a
|-b
|-d
  |-e
Action: d forks e

4.
./fork.py -A a+b,b+c,c+d,c+e,c-
d and e will become children of a, the initial process.
a
|-b
|-d
|-e
./fork.py -A a+b,b+c,c+d,c+e,c- -R
With the -R flag, they will become children of the parent of c, which is b.
a
|-b
  |-d
  |-e

5.
./fork.py -F
Action: a forks b
Action: b EXITS
Action: a forks c
Action: c forks d
Action: a forks e
a
|-c
| |-d
|
|-e
./fork.py -F -s 14
Action: a forks b
Action: b forks c
Action: a forks d
Action: c EXITS
Action: d forks e
a
|-b
|-d
  |-e

6.
./fork.py -t -F
a
|-c
| |-e
|-d
Action: a forks c
Action: a forks d
Action: c forks e
Action: a forks f
Action: f EXITS
The exact actions are unclear.
./fork.py -t -F -s 11
Action: a forks b
Action: b forks c
Action: b forks d
Action: d forks e
Action: b forks f
The exact actions are clear.