15.0 Mechanism: Address Translation
- To deliver efficient virtualization, the OS tries to stay out of the way of the running program.
    - But by interposing at critical points, the OS maintains control over the hardware. This leads to efficiency and control.
- To virtualize memory efficiently, hardware support is required.
- To keep control, the OS has to ensure no application is allowed to access any memory but its own which also requires hardware support.
- To provide flexibility, programs must be able to use their address space in whatever whay they want to.

=> The solution is an addition to limited direct execution: (Hardware-based) address translation.
    - The virtual address provided by the instruction in each memory access is translated to a physical address where the desired information is actually stored by the hardware.
    - As the hardware only provided low-level mechanisms for it to be done efficiently, the OS must manage the memory to keep track of locations which are freed or in use. It must intervene judiciously to maintain control over how memory is used.
    - Goal: Creating an illusion for the program to have its own private memory.

15.1 Assumptions
- The user's address space is placed contigiuously in physical memory.
- Each address space is less than the size of physical memory.
- Each address space has the same size.

15.2 An Example
(See the example in the book.)
- When virtualizing memory, the hardware interposes on each memory access and translate each virtual address to a physical.
    - Interposing is much more broadly applicable: Almost any well-defined interface can be interposed upon, to add new functionality or improve another aspect of the system.
    - The benefit of interposing is transparency. The interface of the client has not to change often.

15.3 Dynamic Hardware-based Relocation
- Base and bounds (also called dynamic relocation) was introducted in the late 1950's.
    - Two hardware registers are required: The base register and the bounds (also called the limit) register.
    - Each program is written and compiled as if it is loaded at address zero.
    - When the program is started, the OS decides where to load it in the physical memory and sets the base register accordingly.
    - When memory is referenced, the processor translates it using: Physical adress = virtual adress + base.
    - Transforming a virtual into a physical address is called address translation. As it happens at runtime, it is called dynamic relocation.
    - The bounds register is used for protection by the processor as it is used by it to check whether the memory reference is within bounds.
    - The bounds register either holds the size of the address space or the physical address of the end of the address space.
    - The part of the processor that helps with address translation (e.g. the base and bounds registers) are called memory mangement unit (MMU).
    - If an address is invalid, the process will raise an exception and the program will likely be terminated.
- Static relocation: Software-based relocation where the loader rewrites the addresses of an executable that is about to be run to the desired offset in physical memory.
    - No protection is provided, as processes can generate bad addresses and illegally access other process's or OS memory.
    - The address space can also not be relocated later to another location if needed.

15.4 Hardware Support: A Summary
- Two different CPU modes are required: Privileged/kernel mode for the OS and user mode for applications.
    - A single bit, stored in the processor status word, indicates the current mode.
    - Upon certain actions (like a system call/an interrupt/an exception) the CPU switches modes.
- The CPU must have a base and bound register which are part of the memory management unit.
    - The base register is used to translate each virtual address into a physical.
    - To check whether an address is valid, the bounds register is used.
    - Special privilleged instructins must be provided by the hardware to modify the base and bounds registers.
- The CPU must be able to generate exceptions when a user program tries to access memory illegally or change the base and bounds registers.
    - The CPU should stop the execution of the program and arrange for the OS exception handler to run.
    - The OS handler can decide how to react, for example by terminating the process.
    - The CPU must provide a method to be informed about the location of these handlers which requires more privileged operations.
- The OS must track which parts of free memory are not in used to allocate memory to processes. One way is a free list which stores ranges of physical memory not in use.

Hardware Requirements                                                                       Notes

Privileged mode                                                                             Needed to prevent user-mode processes from executing privileged operations
Base/bounds registers                                                                       Need pair of registers per CPU to support address translation and bounds checks
Ability to translate virtual addresses and check within bounds                              Circuitry to do translations and check if within bounds limits; in this case, quite simple
Privileged instruction(s) to update base/bounds before letting a user program run           OS must be able to set these values
Privileged instruction(s) to register exception handlers code to run if exception occurs    OS must be able to tell hardware what exception handlers code to run if exception occurs
Ability to raise exceptions                                                                 When processes try to access privileged instructions or out-of-bounds memory

15.5 Operating System Issues
- The OS must find space for a process when it is created.
    - As it is assumed that each address space is smaller than physical memory and each has the same size, the OS can view physical memory as an array of slots and can track wheather each one is free or in use.
    - When a process is created, the OS can search a data structure (often called a free list) to find room for the new address space. When two slots are free, the free list would consist of those two entries.
- The OS must reclaim memory if a process is terminated.
    - The OS puts its memory back on the free list and cleans up any associated data structures.
- The OS mut perform additional steps when a context switch occurs.
    - As there is only one base and bounds register pair on each CPU and their values differ for each running program.
    - The OS must save and restore the base-and-bounds pair when it switches between processes in a per-process strucutre such as the process structure or the process control block (PCB).
- When a process is not running, it is possible for the OS to move its address space to another location.
    - To move it, the OS first has to deschedule it, then it has to copy its address space to the new location. Finally, the OS has to update the saved base register.
- The OS must provide exception handlers. They are installed at boot time.
    - When a process performs a bad load, the OS can terminate it. It then has to remove its entry from the process table.
